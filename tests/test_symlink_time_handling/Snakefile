# Snakemake FAQ says that the input/output of a rule can be a symlink, no problem.
# Need to test that updates to symlinks are recognised and that linking to a file does not
# cause the target timestamp to be updated no matter what the default symlink
# following behaviour on the local system.

#input_file is a file that is 1 hour old
#input_link is a link to input file that is 4 hours old
#output_link is a symlink to input_link that is 2 hours old

#So output_link needs to be re-evaluated since the contents of input_file changed.

#rule main outputs the time difference between inout and output in hours which
#can be checked by Nose to ensure output_link gets touched by Snakemake but
#neither input_file nor input_link are changed.

# Currently this fails - Snakemake does not see that input_file is newer than
# output_link.

import os

shell("touch -d '65 minutes ago' input_file")
shell("ln -s input_file input_link")
shell("touch -h -d '245 minutes ago' input_link")

shell("ln -s input_link output_link")
shell("touch -h -d '125 minutes ago' output_link")
shell("ls -lR > /dev/stderr")

rule main:
    output: "time_diff.txt"
    input: "output_link"
    run:
        time_diff1 = int( (
            os.stat("output_link", follow_symlinks=False).st_mtime -
            os.stat("input_link", follow_symlinks=False).st_mtime
        ) / (60*60) )
        time_diff2 = int( (
            os.stat("output_link", follow_symlinks=False).st_mtime -
            os.stat("input_file", follow_symlinks=False).st_mtime
        ) / (60*60) )
        # I expect the result "4 1"
        shell("ls -lR > /dev/stderr")
        shell("echo {time_diff1} {time_diff2} | tee time_diff.txt 2>&1")

rule make_output:
    output: "output_link"
    input: "input_link"
    run:
        #shell("rm -f {output}") - no longer necessary
        shell("ln -s {input} {output}")
        #This next command should be undone by Snakemake which now touches all outpout
        shell("touch -h -d '8 hours ago' {output}")
