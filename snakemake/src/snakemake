#!/usr/bin/env python3
# -*- coding: utf-8 -*-

'''
Created on 13.11.2011

@author: Johannes Koester
'''

"""
usage: %prog [options] <workflow.snakefile> [rule]

Execute workflow defined in the given snakefile. Optionally specify target rule. If not specified, first rule is used as target.
"""

import os, sys
from optparse import OptionParser

# If running from within source directory,
# add 'lib' to sys.path.
_libdir = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'lib')
if os.path.isfile(os.path.join(_libdir, 'snakemake', '__init__.py')):
    sys.path.insert(0, _libdir)

import snakemake.parser
from snakemake.workflow import *

def print_rules(controller, file = sys.stdout):
    print("Defined rules:", file=file)
    for rule in controller.get_rules(): print(rule.name, file=file)

def main():
    parser = OptionParser(usage=__doc__, version="%prog 1.0")
    parser.add_option("-j", action="store", default=1, dest="processes", type="int", help="Number of parallel processes.")
    parser.add_option("--list", action="store_true", dest="list", help="Show availiable rules in given snakefile.")
    
    options, args = parser.parse_args()
    
    if len(args) < 1:
        parser.print_help()
        exit(1)
        
    Controller.processes = options.processes
    controller = Controller.get_instance()
    
    code = snakemake.parser.compile_to_python(args[0])
    controller.execdsl(code)
    
    if options.list:
        print_rules(controller)
        exit()
    
    controller.setup_dag()
    
    if len(args) < 2: controller.apply_first_rule()
    elif controller.is_rule(args[1]): controller.apply_rule(args[1])
    else:
        print("Rule {} does not exist.".format(args[1]), file=sys.stderr)
        print_rules(controller, file=sys.stderr)
        exit(1)

if __name__ == "__main__":
    main()
