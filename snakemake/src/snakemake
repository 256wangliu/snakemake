#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os, sys
import argparse

# If running from within source directory,
# add 'lib' to sys.path.
_libdir = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'lib')
if os.path.isfile(os.path.join(_libdir, 'snakemake', '__init__.py')):
    sys.path.insert(0, _libdir)

import snakemake


def main():
    parser = argparse.ArgumentParser(description="Execute workflow defined in the given snakefile.")
    parser.add_argument("snakefile", metavar="<snakefile>", help="The workflow definition in a pythonic DSL.")
    parser.add_argument("rule", metavar="<rule>", nargs="?", default=None, help="The rule to be executed. If omitted, first rule in snakefile is used.")
    parser.add_argument("-v", "--version", action="version", version='0.1')
    parser.add_argument("-j", "--jobs", action="store", default=1, metavar="N", dest="jobs", type=int, help="Execute at most N jobs in parallel (default: 1).")
    parser.add_argument("-l", "--list", action="store_true", dest="list", help="Show availiable rules in given snakefile.")
    parser.add_argument("-d", "--directory", action="store", dest="directory", type=str, help="Specify working directory (relative paths in the snakefile will use this as their origin).")
    parser.add_argument("-n", "--dry-run", action="store_true", dest="dryrun", help="Do not execute anything.")
    
    args = parser.parse_args()
    
    try:
        exit(snakemake.snakemake(args.snakefile, list=args.list, jobs=args.jobs, directory=args.directory, rule=args.rule, dryrun=args.dryrun))
    except RuleException:
        # TODO mention at least rule name here.
        print("Error during rule execution", file=sys.stderr)
        exit(1)
        

if __name__ == "__main__":
    main()
