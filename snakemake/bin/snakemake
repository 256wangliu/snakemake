#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os, sys
import argparse
import logging

# If running from within source directory,
# add '../snakemake' to sys.path.
_libdir = os.path.join(os.path.dirname(os.path.realpath(__file__)), '../')
if os.path.isfile(os.path.join(_libdir, 'snakemake', '__init__.py')):
	sys.path.insert(0, _libdir)

import snakemake

def main():
	parser = argparse.ArgumentParser(description="Execute workflow defined in the given snakefile.")
	parser.add_argument("target", nargs="?", default=None, help="A target to build. May be either a rule name or a file.")
	parser.add_argument("--snakefile", "-s", default="Snakefile", help="The workflow definition in a pythonic DSL.")
	parser.add_argument("-j", "--jobs", action="store", default=1, metavar="N", dest="jobs", type=int, help="Execute at most N jobs in parallel (default: 1).")
	parser.add_argument("-l", "--list", action="store_true", dest="list", help="Show availiable rules in given snakefile.")
	parser.add_argument("-d", "--directory", action="store", metavar="D", dest="directory", type=str, help="Specify working directory (relative paths in the snakefile will use this as their origin).")
	parser.add_argument("-n", "--dry-run", action="store_true", dest="dryrun", help="Do not execute anything.")
	parser.add_argument("-f", "--force", action="store_true", dest="forcethis", help="Force the execution of the selected (or the first) rule regardless of already created output.")
	parser.add_argument("-F", "--forceall", action="store_true", dest="forceall", help="Force the execution of the selected (or the first) rule and all rules it is dependent on regardless of already created output.")
	parser.add_argument("--stats", help="Write stats about Snakefile execution to the given file.")
	parser.add_argument("-v", "--version", action="version", version='0.1')
    
	args = parser.parse_args()
    
	# log info level and remove prefixes from output
	logging.basicConfig(level=logging.INFO, format="%(message)s")

	if not os.path.exists(args.snakefile):
		print("Error: Snakefile \"{}\" not present.".format(args.snakefile), file=sys.stderr)
		exit(1)
    
	exit(
		snakemake.snakemake(
			args.snakefile, 
			list=args.list,
			jobs=args.jobs, 
			directory=args.directory, 
			target=args.target, 
			dryrun=args.dryrun, 
			forcethis=args.forcethis,
			forceall=args.forceall,
			stats=args.stats)
	)        

if __name__ == "__main__":
	main()
